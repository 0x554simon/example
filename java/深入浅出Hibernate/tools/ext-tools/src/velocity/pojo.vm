${javaTool.getPackageDeclaration($clazz)}

${classimports}

#if($clazz.hasMeta("class-description"))
/**
$javaTool.toJavaDoc($clazz.getMetaAsString("class-description"),0) */
#else
/**
 * POJO for $clazz.generatedName
 * @author hbm2java
 */
#end
$clazz.modifiers $clazz.scope $clazz.declarationType $clazz.generatedName#if($javaTool.hasExtends($clazz)) extends $javaTool.getExtends($clazz)#end#if($javaTool.hasImplements($clazz)) implements $javaTool.getImplements($clazz)#end {

#if(!$clazz.isInterface())
	// Fields
#foreach($field in $clazz.getFields())  
	## nullable persistent comment not included
	$field.getFieldScope() $javaTool.getTrueTypeName($field, $class2classmap) $field.fieldName;
#end

	// Constructors

	#if($clazz.getAllFieldsForFullConstructor().size()>0)
    /** default constructor */
    public ${clazz.generatedName}() {
    }
    #end
	
	/** full constructor */
	public ${clazz.generatedName}($javaTool.fieldsAsParameters($clazz.getAllFieldsForFullConstructor(),$clazz,$class2classmap)) {
    #if(!$clazz.getFieldsForSupersFullConstructor().isEmpty()) 
	    super($javaTool.fieldsAsArguments($clazz.getFieldsForSupersFullConstructor(),$clazz,$class2classmap));	    
    #end
    #foreach($field in $clazz.getLocalFieldsForFullConstructor())  
        this.$field.fieldName = $field.fieldName;
    #end
    }
	
	#if(($clazz.getAllFieldsForFullConstructor().size() > 0) && $clazz.needsMinimalConstructor())
	/** minimal constructor */
    public ${clazz.generatedName}($javaTool.fieldsAsParameters($clazz.getAllFieldsForMinimalConstructor(),$clazz,$class2classmap)) {
	#if(!${clazz.getFieldsForSupersMinimalConstructor().isEmpty()}) 
	    super($javaTool.fieldsAsArguments($clazz.getFieldsForSupersMinimalConstructor(),$clazz,$class2classmap));	    
    #end
    #foreach($field in $clazz.getLocalFieldsForMinimalConstructor())  
        this.$field.fieldName = $field.fieldName;
    #end
	}     
    #end

## Property accessors
	#foreach($field in $clazz.getFields())
	#if($property.hasMeta("field-description"))
	/**
	$javaTool.toJavaDoc($clazz.getMetaAsString("field-description"),4) */
	#end
	## getter
    $field.getPropertyGetScope() ${javaTool.getTrueTypeName($field, $class2classmap)} $field.getGetterSignature() {
		return this.$field.fieldName;
	}
	
	## setter
	$field.getPropertySetScope() void set$field.getAccessorName()($javaTool.getTrueTypeName($field, $class2classmap) $field.getFieldName()) {
		this.$field.fieldName = $field.fieldName;
	}
	#end    
#else ## if !interface
	## Property accessors for interface
	#foreach($field in $clazz.getFields())
	#if($property.hasMeta("field-description"))
	/**
	$javaTool.toJavaDoc($clazz.getMetaAsString("field-description"),4) */
	#end
	## getter
$field.getPropertyGetScope() ${javaTool.getTrueTypeName($field, $class2classmap)} $field.getGetterSignature();
	
	## setter
	$field.getPropertySetScope() void set$field.getAccessorName()($javaTool.getTrueTypeName($field, $class2classmap) $field.getFieldName());
	#end
#end


}

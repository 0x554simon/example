<!--

  HibernateTools ANT build script.


-->

<project name="HibernateTools" default="dist" basedir=".">

    <!-- Give user a chance to override without editing this file
       (and without typing -D each time it compiles it) -->
    <property file="build.properties"/>
    <property file="${user.home}/.ant.properties"/>

    <!-- Name of project and version, used to create filenames -->
    <property name="Name" value="Hibernate Tools"/>
    <property name="name" value="hibernate-tools"/>
    <property name="version" value="2.1.3"/>

    <!-- set global properties for this build -->
    <property name="src.dir" value="src/java"/>
    <property name="template.dir" value="src/velocity"/>
    <property name="lib.dir" value="lib"/>
    <property name="build.dir" value="build"/>
    <property name="dist.dir" value="target/${name}-${version}"/>
    <property name="doc.dir" value="doc"/>
    <property name="doc.api.dir" value="${doc.dir}/api"/>

    <property name="dist.doc.dir"  value="${dist.dir}/doc"/>
    <property name="dist.api.dir"  value="${dist.dir}/doc/api"/>

    <property name="dist.src.dir" value="${dist.dir}/src/java"/>
    <property name="dist.template.dir" value="${dist.dir}/src/velocity"/>
    <property name="dist.lib.dir" value="${dist.dir}/lib"/>
    <property name="jar.name" value="${name}"/>

    <property name="javadoc" value="http://java.sun.com/j2se/1.3/docs/api"/>
    <property name="javac.debug" value="on"/>
    <property name="javac.optimize" value="off"/>

	<!-- set Hibernate core related properties -->
	<property name="hibernate-core.home" value="../../hibernate-2.1"/>
    <property name="hibernate-core.jar" value="${hibernate-core.home}/hibernate2.jar"/>
	<property name="hibernate-core.lib.dir" value="${hibernate-core.home}/lib"/>
	<property name="hibernate-core.doc.api" value="${hibernate-core.home}/doc/api"/>

    <path id="lib.class.path">
    	<path location="${hibernate-core.jar}"></path>
        <fileset dir="${hibernate-core.lib.dir}">
            <include name="**/*.jar"/>
        </fileset>
        <fileset dir="${lib.dir}">
            <include name="**/*.jar"/>
        </fileset>
    </path>

    <patternset id="support.files">
        <include name="**/*.dtd"/>
        <include name="**/*.xml"/>
        <include name="**/*.xslt"/>
        
        <!-- exclude everything we don't want in the jar -->
        <exclude name="${build.dir}/**/*"/>
        <exclude name="${doc.dir}/**/*"/>
        <exclude name="classes/**/*"/>
        <exclude name="build.xml"/>
        <exclude name="net/sf/hibernate/tool/hbm2java/test/*"/>
        <exclude name="**/*.properties"/>
        <exclude name="**/*.ccf"/>
        <exclude name="**/*.cfg.xml"/>
        <exclude name="META-INF/ra.xml"/>     
        <exclude name="net/sf/hibernate/test/**/*"/>   
    </patternset>

    <patternset id="source.files">
        <include name="**/*.java"/>
        <include name="**/*.properties"/>
        <include name="**/*.ccf"/>
        <exclude name="net/sf/hibernate/test/**/*"/>
    </patternset>

    <!-- Tasks -->

    <target name="clean" description="Cleans up build and dist directories">
        <delete dir="${build.dir}"/>
        <delete dir="${dist.dir}"/>
    </target>

    <target name="init" description="Initialize the build">
        <tstamp>
            <format property="subversion" pattern="yyyy-MM-dd hh:mm:ss"/>
        </tstamp>
        <echo message="Build ${Name}-${version} (${subversion})"/>
        <mkdir dir="${build.dir}"/>
        <copy todir="${build.dir}">
            <fileset dir="${src.dir}">
                <patternset refid="support.files"/>
            </fileset>
            <fileset dir=".">
            	<include name="readme.txt"/>
            	<include name="lgpl.txt"/>
            </fileset>
        </copy>
    </target>

    <target name="compile" depends="init" description="Compile the Java source code">
        <available 
            classname="org.eclipse.core.launcher.Main" 
            property="build.compiler" 
            value="org.eclipse.jdt.core.JDTCompilerAdapter"
            classpath="${java.class.path}"/>        
        <javac
            srcdir="${src.dir}" 
            destdir="${build.dir}"
            classpathref="lib.class.path" 
            debug="${javac.debug}"
            optimize="${javac.optimize}"
            excludes="net/sf/hibernate/test/**/*"
            nowarn="on">
        </javac>
    </target>
    
    <target name="copysource" description="Copy sources to dist dir">
        <mkdir dir="${dist.src.dir}"/>
        <copy todir="${dist.src.dir}">
            <fileset dir="${src.dir}">
                <patternset refid="source.files"/>
            </fileset>
            <fileset dir="${src.dir}">
                <patternset refid="support.files"/>
            </fileset>
        </copy>
        <mkdir dir="${dist.template.dir}"/>
        <copy todir="${dist.template.dir}">
            <fileset dir="${template.dir}">
                <include name="*.*"/>
            </fileset>
        </copy>
    </target>

    <target name="copylib" description="Copy jars to lib dir">
        <mkdir dir="${dist.lib.dir}"/>
        <copy todir="${dist.lib.dir}">
            <fileset dir="${lib.dir}">
                <include name="*.jar"/>
                <exclude name="log4j.jar"/>
                <include name="*.txt"/>
            </fileset>
        </copy>
    </target>
    
    <target name="jar" depends="compile" description="Build the distribution .jar file">
        <mkdir dir="${dist.dir}"/>
        <jar jarfile="${dist.dir}/${jar.name}.jar" basedir="${build.dir}"/>
    </target>
    
    <target name="rar" depends="jar" description="Build a JCA distribution .rar file">
        <mkdir dir="jca"/>    
        <jar jarfile="jca/${jar.name}.rar" basedir="${dist.dir}">
	      <fileset dir="${dist.dir}">
	        <include name="${dist.dir}/${jar.name}.jar" />
	      </fileset>
	      <fileset dir="${src.dir}">
	        <include name="META-INF/ra.xml" />
	      </fileset>	      
        </jar>
    </target>

    <!-- DOCUMENTATION -->

    <target name="javadoc" description="Compile the Javadoc API documentation to dist dir">
        <mkdir dir="${dist.api.dir}"/>
        <javadoc
        	sourcepath="${src.dir}"
        	packagenames="net.sf.hibernate.tool.hbm2java,net.sf.hibernate.tool.class2hbm,net.sf.hibernate.tool.ddl2hbm"
        	classpathref="lib.class.path"
        	destdir="${dist.api.dir}"
        	use="true" 
        	protected="true" 
        	version="true" 
        	windowtitle="${Name} API Documentation" 
        	Overview="${doc.api.dir}/package.html"
        	doctitle="${Name} API Documentation"
        	stylesheetfile="${hibernate-core.doc.api}/jdstyle.css"
        	link="${javadoc}">
        	 
        </javadoc>
        	
    </target>

   
	<target name="extras" description="Copies miscellaneous files to root dir">
		<copy todir="${dist.dir}/bin">
			<fileset dir="bin">
				<include name="*.bat"/>
			</fileset>
		</copy>
		<copy file="readme.txt" todir="${dist.dir}"/>
		<copy file="lgpl.txt" todir="${dist.dir}"/>
		<copy file="changelog.txt" todir="${dist.dir}"/>
		<copy file="build.xml" todir="${dist.dir}"/>
		<replace file="${dist.dir}/build.xml">
			<replacetoken><![CDATA[../${name}]]></replacetoken>
			<replacevalue><![CDATA[../${name}]]></replacevalue>
		</replace>
	</target>
	
	<target name="dist" depends="jar,javadoc,copysource,copylib,extras" description="Build everything">
		<zip zipfile = "${dist.dir}.zip">
			<zipfileset prefix="${name}-${version}" dir="${dist.dir}"/>
		</zip>
		<tar compression="gzip" tarfile="${dist.dir}.tar.gz">
			<tarfileset prefix="${name}-${version}" dir="${dist.dir}"/>
		</tar>
	</target>

    <target name="info" description="Echoes useful system properties">
        <echo message="java.vm.info=${java.vm.info}"/>
        <echo message="java.vm.name=${java.vm.name}"/>
        <echo message="java.vm.vendor=${java.vm.vendor}"/>
        <echo message="java.vm.version=${java.vm.version}"/>
        <echo message="os.arch=${os.arch}"/>
        <echo message="os.name=${os.name}"/>
        <echo message="os.version=${os.version}"/>
        <echo message="java.home = ${java.home}"/>
        <echo message="java.class.path = ${java.class.path}"/>
        <echo message="build.compiler = ${build.compiler}"/>
        <echo message="file.encoding=${file.encoding}"/>
        <echo message="user.home = ${user.home}"/>
        <echo message="user.language=${user.language}"/>
    </target>
    
    <target name="junit" depends="compile">
        <mkdir dir="test_output"/>
        <junit printsummary="yes" haltonfailure="yes">
            <classpath>
                <fileset dir="${lib.dir}">
                    <include name="**/*.jar"/>
                </fileset>
                <pathelement path="${build.dir}"/>
                <pathelement path="."/>
            </classpath>
            <formatter type="plain"/>
            <formatter type="xml"/>
            <batchtest fork="yes" todir="test_output" haltonfailure="no">
                <fileset dir="${build.dir}">
                    <include name="net/sf/hibernate/test/*Test.class"/>
                    <exclude name="net/sf/hibernate/test/*PerformanceTest.class"/>
                </fileset>
            </batchtest>
        </junit>
    </target>
    
    <target name="junitreport" depends="">
        <junitreport todir="./test_output">
            <fileset dir="test_output">
                <include name="TEST-*.xml"/>
            </fileset>
            <report format="frames" todir="./test_output"/>
        </junitreport>
    </target>

</project>
